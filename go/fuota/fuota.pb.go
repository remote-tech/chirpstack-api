// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: fuota.proto

package fuota

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FUOTAServerService_CreateDeployment_FullMethodName        = "/fuota.FUOTAServerService/CreateDeployment"
	FUOTAServerService_GetDeploymentStatus_FullMethodName     = "/fuota.FUOTAServerService/GetDeploymentStatus"
	FUOTAServerService_GetDeploymentDeviceLogs_FullMethodName = "/fuota.FUOTAServerService/GetDeploymentDeviceLogs"
	FUOTAServerService_DeleteDeployment_FullMethodName        = "/fuota.FUOTAServerService/DeleteDeployment"
)

// FUOTAServerServiceClient is the client API for FUOTAServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FUOTAServerServiceClient interface {
	// CreateDeployment creates the given FUOTA deployment.
	CreateDeployment(ctx context.Context, in *CreateDeploymentRequest, opts ...grpc.CallOption) (*CreateDeploymentResponse, error)
	// GetDeploymentStatus returns the FUOTA deployment status given an ID.
	GetDeploymentStatus(ctx context.Context, in *GetDeploymentStatusRequest, opts ...grpc.CallOption) (*GetDeploymentStatusResponse, error)
	// GetDeploymentDeviceLogs returns the FUOTA logs given a deployment ID and DevEUI.
	GetDeploymentDeviceLogs(ctx context.Context, in *GetDeploymentDeviceLogsRequest, opts ...grpc.CallOption) (*GetDeploymentDeviceLogsResponse, error)
	// DeleteDeployment deletes the given FUOTA deployment.
	DeleteDeployment(ctx context.Context, in *GetDeploymentStatusRequest, opts ...grpc.CallOption) (*CreateDeploymentResponse, error)
}

type fUOTAServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFUOTAServerServiceClient(cc grpc.ClientConnInterface) FUOTAServerServiceClient {
	return &fUOTAServerServiceClient{cc}
}

func (c *fUOTAServerServiceClient) CreateDeployment(ctx context.Context, in *CreateDeploymentRequest, opts ...grpc.CallOption) (*CreateDeploymentResponse, error) {
	out := new(CreateDeploymentResponse)
	err := c.cc.Invoke(ctx, FUOTAServerService_CreateDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fUOTAServerServiceClient) GetDeploymentStatus(ctx context.Context, in *GetDeploymentStatusRequest, opts ...grpc.CallOption) (*GetDeploymentStatusResponse, error) {
	out := new(GetDeploymentStatusResponse)
	err := c.cc.Invoke(ctx, FUOTAServerService_GetDeploymentStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fUOTAServerServiceClient) GetDeploymentDeviceLogs(ctx context.Context, in *GetDeploymentDeviceLogsRequest, opts ...grpc.CallOption) (*GetDeploymentDeviceLogsResponse, error) {
	out := new(GetDeploymentDeviceLogsResponse)
	err := c.cc.Invoke(ctx, FUOTAServerService_GetDeploymentDeviceLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fUOTAServerServiceClient) DeleteDeployment(ctx context.Context, in *GetDeploymentStatusRequest, opts ...grpc.CallOption) (*CreateDeploymentResponse, error) {
	out := new(CreateDeploymentResponse)
	err := c.cc.Invoke(ctx, FUOTAServerService_DeleteDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FUOTAServerServiceServer is the server API for FUOTAServerService service.
// All implementations must embed UnimplementedFUOTAServerServiceServer
// for forward compatibility
type FUOTAServerServiceServer interface {
	// CreateDeployment creates the given FUOTA deployment.
	CreateDeployment(context.Context, *CreateDeploymentRequest) (*CreateDeploymentResponse, error)
	// GetDeploymentStatus returns the FUOTA deployment status given an ID.
	GetDeploymentStatus(context.Context, *GetDeploymentStatusRequest) (*GetDeploymentStatusResponse, error)
	// GetDeploymentDeviceLogs returns the FUOTA logs given a deployment ID and DevEUI.
	GetDeploymentDeviceLogs(context.Context, *GetDeploymentDeviceLogsRequest) (*GetDeploymentDeviceLogsResponse, error)
	// DeleteDeployment deletes the given FUOTA deployment.
	DeleteDeployment(context.Context, *GetDeploymentStatusRequest) (*CreateDeploymentResponse, error)
	mustEmbedUnimplementedFUOTAServerServiceServer()
}

// UnimplementedFUOTAServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFUOTAServerServiceServer struct {
}

func (UnimplementedFUOTAServerServiceServer) CreateDeployment(context.Context, *CreateDeploymentRequest) (*CreateDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeployment not implemented")
}
func (UnimplementedFUOTAServerServiceServer) GetDeploymentStatus(context.Context, *GetDeploymentStatusRequest) (*GetDeploymentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentStatus not implemented")
}
func (UnimplementedFUOTAServerServiceServer) GetDeploymentDeviceLogs(context.Context, *GetDeploymentDeviceLogsRequest) (*GetDeploymentDeviceLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentDeviceLogs not implemented")
}
func (UnimplementedFUOTAServerServiceServer) DeleteDeployment(context.Context, *GetDeploymentStatusRequest) (*CreateDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeployment not implemented")
}
func (UnimplementedFUOTAServerServiceServer) mustEmbedUnimplementedFUOTAServerServiceServer() {}

// UnsafeFUOTAServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FUOTAServerServiceServer will
// result in compilation errors.
type UnsafeFUOTAServerServiceServer interface {
	mustEmbedUnimplementedFUOTAServerServiceServer()
}

func RegisterFUOTAServerServiceServer(s grpc.ServiceRegistrar, srv FUOTAServerServiceServer) {
	s.RegisterService(&FUOTAServerService_ServiceDesc, srv)
}

func _FUOTAServerService_CreateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FUOTAServerServiceServer).CreateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FUOTAServerService_CreateDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FUOTAServerServiceServer).CreateDeployment(ctx, req.(*CreateDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FUOTAServerService_GetDeploymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FUOTAServerServiceServer).GetDeploymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FUOTAServerService_GetDeploymentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FUOTAServerServiceServer).GetDeploymentStatus(ctx, req.(*GetDeploymentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FUOTAServerService_GetDeploymentDeviceLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentDeviceLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FUOTAServerServiceServer).GetDeploymentDeviceLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FUOTAServerService_GetDeploymentDeviceLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FUOTAServerServiceServer).GetDeploymentDeviceLogs(ctx, req.(*GetDeploymentDeviceLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FUOTAServerService_DeleteDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FUOTAServerServiceServer).DeleteDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FUOTAServerService_DeleteDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FUOTAServerServiceServer).DeleteDeployment(ctx, req.(*GetDeploymentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FUOTAServerService_ServiceDesc is the grpc.ServiceDesc for FUOTAServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FUOTAServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fuota.FUOTAServerService",
	HandlerType: (*FUOTAServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeployment",
			Handler:    _FUOTAServerService_CreateDeployment_Handler,
		},
		{
			MethodName: "GetDeploymentStatus",
			Handler:    _FUOTAServerService_GetDeploymentStatus_Handler,
		},
		{
			MethodName: "GetDeploymentDeviceLogs",
			Handler:    _FUOTAServerService_GetDeploymentDeviceLogs_Handler,
		},
		{
			MethodName: "DeleteDeployment",
			Handler:    _FUOTAServerService_DeleteDeployment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fuota.proto",
}
